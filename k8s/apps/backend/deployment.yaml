apiVersion: apps/v1
kind: Deployment
metadata:
  name: ars-backend
  namespace: ars
  labels:
    app.kubernetes.io/name: ars-backend
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: ars
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ars-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ars-backend
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: ars
    spec:
      serviceAccountName: ars-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: ars-backend
        image: ars-backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
        readinessProbe:
          httpGet:
            path: /readyz
            port: http
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        env:
        - name: NODE_ENV
          value: production
        - name: REDIS_URL
          value: "redis://redis.ars.svc.cluster.local:6379"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ars-db-secret
              key: connection-string
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: ars-backend-config
---
apiVersion: v1
kind: Service
metadata:
  name: ars-backend
  namespace: ars
  labels:
    app.kubernetes.io/name: ars-backend
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: ars
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: ars-backend
